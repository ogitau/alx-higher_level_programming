0-add_integer module test cases
===============================

Module that takes two integers or floats as arguments and returns their sum

Usage: "add_integer"
-------------------

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two positive integers (a = 5 and b = 5):
    >>> add_integer(5, 5)
    10

Adding one positive and one negative integer (a = 5 and b = -1)
    >>> add_integer(5, -1)
    4

Adding two negative integers (a = -5 and b = -5):
    >>> add_integer(-5, -5)
    -10

Adding two integers with the second being the same as the default value of b (a = 10 and b = 98):
    >>> add_integer(10)
    108

Adding a positive float and a positive integer (a = 2.5 and b = 5):
    >>> add_integer(2.5, 5)
    7

Adding a float and an integer where the integer is equal to the default value of b (a = 10.5 and b = 98):
    >>> add_integer(10.5)
    108

Adding a positive float and a negative integer (a = 10.5 and b = -2):
	    >>> add_integer(10.5, -2)
	    8

Adding two negative floats (a = -10.5 and b = -2):
	    >>> add_integer(-10.5, -2)
	    -12

Adding an integer number and a string (a = 7 and b = "Samba"):
    >>> add_integer(7, "Samba")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Adding a letter and a number (a = 'c' and b = 1):
    >>> add_integer('c', 5)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding two letters (a = 'e' and b = 't')
    >>> add_integer('e', 't')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((2, 3))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a number and a list
    >>> add_integer(13, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer


Adding two float numbers (a = 1.5 and b = 4.1)
    >>> add_integer(1.5, 4.1)
    5

Check Overflow :

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer


Check for NaN :

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
